'scopeName': 'source.pwn'
'fileTypes': [
  'pwn'
  'inc'
]
'firstLineMatch': '-[*]-( Mode:)? Pawn -[*]-'
'name': 'Pawn'
'patterns': [
  {
    'include': '#preprocessor-rule-enabled'
  }
  {
    'include': '#preprocessor-rule-disabled'
  }
  {
    'include': '#preprocessor-rule-other'
  }
  {
    'include': '#preprocessor-rule-inline'
  }
  {
    'include': '#comments'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])(assert|break|case|continue|default|do|else|for|foreach|goto|if|return|sleep|state|switch|while|defer|repeat|stop|call|using|loadtext|yield)(?![a-zA-Z0-9_@])'
    'name': 'keyword.control.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])(char|enum|new)(?![a-zA-Z0-9_@])'
    'name': 'storage.type.c'
  }
  {
    'match': '((?<![a-zA-Z0-9_@])[PC]\\:[0-7CEFWDI](?![a-zA-Z0-9_@]))|((?<![a-zA-Z0-9_@])([A-Za-z_@][A-Za-z0-9_@]*)\\:\\s*(?=[a-zA-Z0-9_@]))'
    'name': 'storage.modifier.c'
    'captures':
      '1':
        'name': 'support.function.any-method.c'
      '2':
        'name': 'storage.modifier.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])(public|forward|native|hook|const|static|stock|inline|foreign|global|timer|remote|iterfunc|uvar|svar|__declspec|master_hook|master_task|master_ptask|group_hook|master_func|task|ptask|@foreign|@global|mhook)(?![a-zA-Z0-9_@])'
    'name': 'storage.modifier.c'
  }
  {
    'comment': 'common C constant naming idiom -- kConstantVariable'
    'match': '(?<![a-zA-Z0-9_@])k[A-Z]\\w*(?![a-zA-Z0-9_@])'
    'name': 'constant.other.variable.mac-classic.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])g[A-Z]\\w*(?![a-zA-Z0-9_@])'
    'name': 'variable.other.readwrite.global.mac-classic.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])g_[A-Z]\\w*(?![a-zA-Z0-9_@])'
    'name': 'variable.other.readwrite.global.mac-classic.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])s[A-Z]\\w*(?![a-zA-Z0-9_@])'
    'name': 'variable.other.readwrite.static.mac-classic.c'
  }
  {
    'match': '(?<![a-zA-Z0-9_@])(true|false|cellmin|cellmax|cellbits|cellbytes|__Pawn|__line|__file|__date|__time|__compat|__PawnBuild|_inc_[a-zA-Z0-9_@]+|(e_)?([A-Z_@]|[0-9](x[0-9])?){3,})(?![a-zA-Z0-9_@])'
    'name': 'constant.language.c'
  }
  {
    'include': '#numbers'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.c'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.c'
    'name': 'string.quoted.double.c'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.c'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.c'
    'name': 'string.quoted.single.c'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
    ]
  }
  {
    'begin': '(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_@][a-zA-Z0-9_@]*))  # macro name\n        \t\t(\\S*)                            # and optionally anything not whitespace\n        \t'
    'beginCaptures':
      '1':
        'name': 'keyword.control.import.define.c'
      '2':
        'name': 'entity.name.function.preprocessor.c'
      '4':
        'name': 'entity.name.function.preprocessor.c'
        'patterns': [
          {
            'include': '#macro_parameter'
          }
        ]
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.macro.c'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.c'
      }
      {
        'include': '#numbers'
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.double.c'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
        ]
      }
      {
        'include': '#macro_string'
      }
      {
        'include': '#macro_parameter'
      }
    ]
  }
  {
    'begin': '^\\s*#\\s*(error|warning)\\s+(.*?)(?:(?=(?://|/\\*))|$)'
    'captures':
      '1':
        'name': 'keyword.control.import.error.c'
      '2':
        'name': 'string.quoted.double.c'
    'end': '(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.diagnostic.c'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.c'
      }
    ]
  }
  {
    'begin': '^\\s*#\\s*(include|tryinclude)\\b\\s+'
    'captures':
      '1':
        'name': 'keyword.control.import.include.c'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.c.include'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.c'
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.double.include.c'
      }
      {
        'begin': '<'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '>'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.other.lt-gt.include.c'
      }
    ]
  }
  {
    'include': '#pragma-mark'
  }
  {
    'begin': '^\\s*#\\s*(assert|endinput|file|else|line|section)(?![a-zA-Z0-9_@])'
    'captures':
      '1':
        'name': 'keyword.control.import.c'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.c'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.c'
      }
    ]
  }
  {
    'match': '(?<![a-zA-Z0-9_@])(noErr|kNilOptions|kInvalidID|kVariableLengthArray)(?![a-zA-Z0-9_@])'
    'name': 'support.constant.mac-classic.c'
  }
  {
    'comment': 'Reserved POSIX types'
    'match': '(?<![a-zA-Z0-9_@])([a-z0-9_@]+_t)(?![a-zA-Z0-9_@])'
    'name': 'support.type.posix-reserved.c'
  }
  {
    'include': '#block'
  }
  {
    'begin': '(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |  \n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_@] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_@][A-Za-z0-9_@]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.function.leading.c'
      '3':
        'name': 'entity.name.function.c'
      '4':
        'name': 'punctuation.definition.parameters.c'
    'end': '(?<=\\})|(?=#)|(;)'
    'name': 'meta.function.c'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#parens'
      }
      {
        'match': '(?<![a-zA-Z0-9_@])(const|override|final)(?![a-zA-Z0-9_@])'
        'name': 'storage.modifier.c'
      }
      {
        'include': '#block'
      }
    ]
  }
  {
    'begin': '#'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.c'
    'end': '(?=[)";,])'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.c'
    'name': 'string.quoted.double.c'
    'patterns': [
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'include': '#operators'
  }
]
'repository':
  'access':
    'captures':
      '1':
        'name': 'punctuation.separator.variable-access.c'
      '2':
        'name': 'variable.other.dot-access.c'
    'match': '(\\.)([a-zA-Z_@][a-zA-Z_0-9@]*)\\b(?!\\s*\\()'
  'block':
    'patterns': [
      {
        'begin': '\\{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.c'
        'end': '\\}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.c'
        'name': 'meta.block.c'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'block_innards':
    'patterns': [
      {
        'include': '#preprocessor-rule-enabled-block'
      }
      {
        'include': '#preprocessor-rule-disabled-block'
      }
      {
        'include': '#preprocessor-rule-other-block'
      }
      {
        'include': '#access'
      }
      {
        'include': '#c_function_call'
      }
      {
        'captures':
          '1':
            'name': 'variable.other.c'
          '2':
            'name': 'punctuation.definition.parameters.c'
        'match': '(?x)\n\t\t\t        (?x)\n\t\t\t(?:  \n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_@][A-Za-z0-9_@]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()'
        'name': 'meta.initialization.c'
      }
      {
        'include': '#block'
      }
      {
        'include': '$base'
      }
    ]
  'c_function_call':
    'captures':
      '1':
        'name': 'punctuation.whitespace.function-call.leading.c'
      '2':
        'name': 'support.function.any-method.c'
      '4':
        'name': 'punctuation.definition.parameters.c'
    'match': '(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(while|for|do|if|else|switch|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_@][A-Za-z0-9_@]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()'
    'name': 'meta.function-call.c'
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block.c'
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'name': 'comment.block.c'
      }
      {
        'begin': '/\\*\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.documentation.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.documentation.end.c'
        'name': 'comment.block.c'
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.c'
        'name': 'comment.block.c'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.c'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line.c'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.c++'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.c++'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.c++'
            'end': '\\n'
            'name': 'comment.line.double-slash.c++'
          }
        ]
      }
    ]
  'disabled':
    'begin': '^\\s*#\\s*(if|elseif)\\s*(!?defined)?\\b.*$'
    'comment': 'eat nested preprocessor if(def)s'
    'end': '^\\s*#\\s*endif(?![a-zA-Z0-9_@])'
    'patterns': [
      {
        'include': '#disabled'
      }
      {
        'include': '#pragma-mark'
      }
    ]
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.c'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.c'
    'name': 'meta.parens.c'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'pragma-mark':
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.pragma.c'
      '3':
        'name': 'meta.toc-list.pragma-mark.c'
    'match': '^\\s*(#\\s*(pragma\\s+[a-zA-Z0-9_@]+)\\s+(.*))'
    'name': 'meta.section'
  'preprocessor-rule-disabled':
    'begin': '^\\s*(#(if)\\s+(0)\\b).*'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.if.c'
      '3':
        'name': 'constant.numeric.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b)'
        'captures':
          '1':
            'name': 'meta.preprocessor.c'
          '2':
            'name': 'keyword.control.import.else.c'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'name': 'comment.block.preprocessor.if-branch'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-disabled-block':
    'begin': '^\\s*(#(if)\\s+(0)\\b).*'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.if.c'
      '3':
        'name': 'constant.numeric.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b)'
        'captures':
          '1':
            'name': 'meta.preprocessor.c'
          '2':
            'name': 'keyword.control.import.else.c'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'name': 'comment.block.preprocessor.if-branch.in-block'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled':
    'begin': '^\\s*(#(if)\\s+(0*1)\\b)'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.if.c'
      '3':
        'name': 'constant.numeric.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b).*'
        'captures':
          '1':
            'name': 'meta.preprocessor.c'
          '2':
            'name': 'keyword.control.import.else.c'
        'contentName': 'comment.block.preprocessor.else-branch'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-block':
    'begin': '^\\s*(#(if)\\s+(0*1)\\b)'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.if.c'
      '3':
        'name': 'constant.numeric.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b).*'
        'captures':
          '1':
            'name': 'meta.preprocessor.c'
          '2':
            'name': 'keyword.control.import.else.c'
        'contentName': 'comment.block.preprocessor.else-branch.in-block'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'preprocessor-rule-inline':
    'begin': '^\\s*(#\\s*(pragma|undef)\\b\\s*([a-zA-Z0-9_@]*)?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.c'
      '3':
        'name': 'entity.name.function.preprocessor.c'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-other':
    'begin': '^\\s*(#\\s*((if|elseif|emit)\\s*(!?defined)?)\\b\\s*(.*)?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.c'
      '5':
        'name': 'entity.name.function.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-other-block':
    'begin': '^\\s*(#\\s*((if|elseif)\\s*(!?defined)?)\\b\\s*(.*)?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.c'
      '2':
        'name': 'keyword.control.import.c'
      '5':
        'name': 'entity.name.function.preprocessor.c'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
        'name': 'constant.character.escape.c'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.c'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +\']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t'
        'name': 'constant.other.placeholder.c'
      }
      {
        'match': '%[0-9]?'
        'name': 'invalid.illegal.placeholder.c'
      }
    ]
  'macro_parameter':
    'patterns': [
      {
        'match': '%[0123456789%]'
        'name': 'constant.numeric.preprocessor.c'
      }
    ]
  'macro_string':
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '(?=[)";,])'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.double.c'
        'patterns': [
          {
            'include': '#macro_parameter'
          }
        ]
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '[\\(\\)\\+\\-\\%\\*\\!\\,\\;\\[\\]\\^\\|\\&\\<\\>\\=\\~\\?\\:\\/]'
        'name': 'keyword.operator'
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '(?<![a-zA-Z0-9_@])(\-?)((0x[0-9a-fA-F]+)|(0b[01]+)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(?![a-zA-Z0-9_@])'
        'name': 'constant.numeric.c'
      }
    ]

